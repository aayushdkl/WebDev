//The difference between the Imperative and Declarative programming paradigms is that in the former, the programmer specifies the exact steps to achieve a goal, while in the latter, the programmer specifies the goal and the computer figures out how to achieve it. React is a declarative library, which means that you describe the desired state of your UI, and React takes care of updating the UI to match that state.
//React components are reusable pieces of code that can be used to build user interfaces. They are typically written as functions or classes in React. Components can have their own state and lifecycle methods, and can accept input data (props) to customize their behavior and appearance.

//Declarative programming is a programming paradigm that expresses the logic of a computation without describing its control flow. It focuses on what the program should accomplish, rather than how it should accomplish it. React is a declarative library, which means that you describe the desired state of your UI, and React takes care of updating the UI to match that state.

//Impreative programming is a programming paradigm that specifies the exact steps to achieve a goal. It focuses on how the program should accomplish a task, rather than what the task is. Vanilla JavaScript is an example of an imperative programming language, where you have to manually update the DOM to reflect changes in the application state.
